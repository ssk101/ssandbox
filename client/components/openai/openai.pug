facade-select(
  (select)=this.selectModel(e),
  value=this.model.id
)
  each model in this.sortedModels
    option(
      [value]=model.id
    )= model.id

if this.model.personalities
  facade-select(
    (select)=this.selectPersonality(e.value),
    value=this.model.personality,
  )
    each personality in this.model.personalities
      option(
        [value]=personality.name
      )= personality.name

.inputs(is-code=this.isCode)
  .labelled
    label(for='input') Input
    textarea.input(
      id='input',
      placeholder='Prompt',
      (input)=this.onInput(e),
      autocomplete='off',
      autocorrect='off',
      spellcheck='false',
    )

  .labelled(hidden=!this.isEdit)
    label(for='instruction') Instruction
    textarea.instruction(
      id='instruction',
      placeholder='Edit instruction (e.g. "Refactor this" or "Fix spelling mistakes")',
      autocomplete='off',
      autocorrect='off',
      spellcheck='false',
    )

  .buttons
    facade-button(
      (click)=this.submit(),
      disabled=!this.canSubmit,
    ) Submit

    if this.isChat
      facade-button(
        (click)=this.clearMessageHistory(),
      ) Clear chat history

    .responding(hidden=!this.isResponding)= this.receivingResponseLabel()

.previews(is-code=this.isCode)
  .labelled
    label(for='preview')= `Code ${this.langFor('input') ? '(best guess: ' + this.langFor('input') + ')' : ''}`
    pre.preview(id='preview')
      code(is-code=this.isCode)= this.input

.labelled.response
  label(for='response')= `Response ${this.langFor('response') ? '(best guess: ' + this.langFor('response') + ')' : ''}`
  pre.response(id='response')
    code(is-code=this.isCode).
      Awaiting input...